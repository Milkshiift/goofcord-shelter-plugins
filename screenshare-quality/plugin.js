(function(exports){"use strict";const {util:{log:b},flux:{stores:{UserStore:c,MediaEngineStore:d},dispatcher:e}}=shelter,f=[480,720,1080,1440],g=[5,15,30,60];let h=720,i=1280,j=30;function k(p,q){h=o(p,f),i=Math.round(h*(screen.width/screen.height)),j=o(q,g)}async function l(){const p=[...d.getMediaEngine().connections],q=c.getCurrentUser().id,r=p.find((t)=>t.streamUserId===q),s=Math.round(i*h*j*.08);if(r)r.videoStreamParameters[0].maxFrameRate=j,r.videoStreamParameters[0].maxResolution.height=h,r.videoStreamParameters[0].maxResolution.width=i,r.videoQualityManager.goliveMaxQuality.bitrateMin=s*.95,r.videoQualityManager.goliveMaxQuality.bitrateMax=s*1.25,r.videoQualityManager.goliveMaxQuality.bitrateTarget=s,b(`Patched current user stream with resolution: ${h} FPS: ${j} Target Bitrate: ${s}`)}function m(){if(window.goofcord.version.split(".")[1]>8)return;e.subscribe("MEDIA_ENGINE_VIDEO_SOURCE_QUALITY_CHANGED",l)}function n(){e.unsubscribe("MEDIA_ENGINE_VIDEO_SOURCE_QUALITY_CHANGED",l)}function o(p,q){let r=q[0],s=Math.abs(p-r);for(let t=1;t<q.length;t++){let u=Math.abs(p-q[t]);if(u<s)r=q[t],s=u}return r}window.ScreenshareQuality={};window.ScreenshareQuality.patchScreenshareQuality=k;exports.onLoad=m;exports.onUnload=n;return exports})({});